datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:
model User {
  id                  Int       @id @default(autoincrement())
  email               String    @unique
  name                String?
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  posts               Post[]
  roles               Role[]    @default([GUEST])
  profile             Profile?
  comments            Comment[]
  thumbs              Thumb[]
}

model Profile {
  id           Int      @id @default(autoincrement())
  bio          String?
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  avatar       String?
  name         String?
  japaneseName String?
}

model Post {
  id             Int                  @id @default(autoincrement())
  title          String
  body           String?
  createdAt      DateTime             @default(now())
  user           User                 @relation(fields: [userId], references: [id])
  userId         Int
  published      Boolean              @default(false)
  type           PostType             @default(ARTICLE)
  comments       Comment[]
  videoPost      VideoPost?
  coverImage     Image?               @relation(fields: [coverImageId], references: [id])
  coverImageId   Int?
  imageGalleries ImageGalleryOnPost[]
}

model VideoPost {
  id       Int    @id @default(autoincrement())
  post     Post   @relation(fields: [postId], references: [id])
  postId   Int    @unique
  videoUrl String
}

enum Role {
  ADMIN
  MODERATOR
  USER
  GUEST
}

enum PostType {
  ARTICLE
  VIDEO
  CHOTTO
  HAIKU
  PHOTO_GALLERY
}

model Comment {
  id        Int       @id @default(autoincrement())
  body      String
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int
  parent    Comment?  @relation("ChildComments", fields: [parentId], references: [id])
  parentId  Int?
  children  Comment[] @relation("ChildComments")
  thumbs    Thumb[]
  deleted   Boolean   @default(false)
}

model Thumb {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
  up        Boolean
}

model Image {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  imageId   String
  url       String
  postId    Int
  Post      Post[]
}

model ImageGalleryImage {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  imageId        String
  url            String
  imageGalleryId Int
  imageGallery   ImageGallery @relation(fields: [imageGalleryId], references: [id])
}

model ImageGallery {
  id                 Int                  @id @default(autoincrement())
  createdAt          DateTime             @default(now())
  ImageGalleryOnPost ImageGalleryOnPost[]
  images             ImageGalleryImage[]
  name               String?
  description        String?
}

model ImageGalleryOnPost {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  imageGalleryId Int
  imageGallery   ImageGallery @relation(fields: [imageGalleryId], references: [id])
  postId         Int
  post           Post         @relation(fields: [postId], references: [id])
}
